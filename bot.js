require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

const token = process.env.TOKEN;
const mongoUri = process.env.MONGODB_URI;
const allowedUserIds = process.env.ALLOWED_USER_IDS.split(',').map(id => id.trim());

const bot = new TelegramBot(token, { webHook: true });

// –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å webhook URL
const url = process.env.URL || 'https://photozvit-tg.vercel.app/';
bot.setWebHook(`${url}/api/bot`)
    .then(() => console.log('Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'))
    .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Webhook:', err));

const managerId = '827127631';  // –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const managerContact = '@vaysed_manager';  // –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

mongoose.connect(mongoUri, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error('MongoDB connection error:', err));

const fileSchema = new mongoose.Schema({
    userId: String,
    text: String,
    textPath: String
});

const File = mongoose.model('File', fileSchema);

bot.onText(/\/start/, async (msg) => {
    const userId = msg.chat.id;

    try {
        const file = await File.findOne({ userId: userId.toString() });

        if (file) {
            await bot.sendMessage(userId, `üì∏ –§–æ—Ç–æ–∑–≤—ñ—Ç –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ.\n${file.text}`);
            if (file.textPath && fs.existsSync(file.textPath)) {
                await bot.sendMessage(userId, file.textPath);
                sendSurvey(userId);
            } else {
                sendSurvey(userId);
            }
        } else {
            await bot.sendMessage(userId, '‚òπÔ∏è –§–æ—Ç–æ–∑–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
        }
    } catch (err) {
        console.error(err);
        await bot.sendMessage(userId, '‚òπÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
});

function sendSurvey(chatId) {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '‚úÖ –¢–∞–∫', callback_data: 'yes' },
                    { text: '‚ùå –ù—ñ', callback_data: 'no' },
                ],
                [
                    { text: '‚ùî –û–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data: 'contact_manager' }
                ]
            ]
        }
    };
    bot.sendMessage(chatId, 'ü§ó –¢–æ–≤–∞—Ä –ø—ñ–¥—ñ–π—à–æ–≤? –ú–æ–∂–Ω–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É?', options);
}

bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const data = callbackQuery.data;
    const username = callbackQuery.from.username ? `@${callbackQuery.from.username}` : '–∫–ª—ñ—î–Ω—Ç';

    try {
        if (data === 'yes') {
            await bot.sendMessage(managerId, `${username} –ø–æ–≤—ñ–¥–æ–º–∏–≤(–ª–∞), —â–æ —Ç–æ–≤–∞—Ä –ø—ñ–¥—ñ–π—à–æ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É —Ç–∞ –æ–≥–æ–ª–æ—Å–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É —Ü—ñ–Ω—É –∑–∞ –Ω–µ—ó.`);
            await bot.sendMessage(message.chat.id, 'üíï –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –ú–∏ –ø–µ—Ä–µ–¥–∞–º–æ –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –º–µ–Ω–µ–¥–∂–µ—Ä—É.');
        } else if (data === 'no') {
            await bot.sendMessage(managerId, `${username} –ø–æ–≤—ñ–¥–æ–º–∏–≤(–ª–∞), —â–æ —Ç–æ–≤–∞—Ä –Ω–µ –ø—ñ–¥—ñ–π—à–æ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º–æ–≤–∏—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—é —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É –≥—Ä–æ—à—ñ.`);
            await bot.sendMessage(message.chat.id, 'üíï –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –ú–∏ –ø–µ—Ä–µ–¥–∞–º–æ –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –º–µ–Ω–µ–¥–∂–µ—Ä—É.');
        } else if (data === 'contact_manager') {
            await bot.sendMessage(managerId, `${username} —Ö–æ—á–µ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ñ–æ—Ç–æ–∑–≤—ñ—Ç—É.`);
            await bot.sendMessage(message.chat.id, `üåù –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: ${managerContact}`);
        }

        // Delete the original survey message
        await bot.deleteMessage(message.chat.id, message.message_id);
        
        bot.answerCallbackQuery(callbackQuery.id);
    } catch (err) {
        console.error('Error handling callback query:', err);
    }
});

async function addNewFile(userId, text) {
    const textPath = path.join(__dirname, 'texts', `${userId}.txt`);
    fs.writeFileSync(textPath, text, 'utf-8');

    const newFile = new File({ userId: userId.toString(), text, textPath });

    try {
        await newFile.save();
        console.log('New file added to database');
    } catch (err) {
        console.error('Error saving file to database:', err);
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /addfile
bot.onText(/\/addfile (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;

    if (!allowedUserIds.includes(chatId.toString())) {
        await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.');
        return;
    }

    const args = match[1].split('|');
    if (args.length !== 2) {
        await bot.sendMessage(chatId, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /addfile userId|text');
        return;
    }

    const [userId, text] = args;
    try {
        await addNewFile(userId.trim(), text.trim());
        await bot.sendMessage(chatId, '–ù–æ–≤–∏–π —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!');
    } catch (err) {
        console.error('Error adding new file:', err);
        await bot.sendMessage(chatId, '–ü—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.');
    }
});

console.log('Bot started');
